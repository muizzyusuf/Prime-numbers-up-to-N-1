# Write  aMIPS program thatpromptsthe  user for  an integer  N,  and then  displays all prime numbersup  to (N–1).  
# Use  a  procedure isPrimethat  accepts  an  integer  argument  and returns 1 if the argument is prime and 0 otherwise. 
# Comment your code.It would help if you start by implementing your program in a high-level language (C or Java), 
# test it to make sure your algorithm works, and then translate it to MIPS. 
# Include your high-level  code  (or  a  pseudo-code  version  of  it)as  comments  at  the  beginning  of  your  MIPS program.

#PSEUDO-CODE
#main(){
#	int a = user input of number with scanner
#	for(int i=2; i < a; i++){
#		if(isPrime(i)){
#			System.out.print(i + " ");
#		}
#	}
#}
# public static boolean isPrime(int number){
#    for(int j=2; j<number; j++) 	//from check from 2 ---> number-1
#       if(number % j ==0) 		// if number % j == 0 at any point, the number is not prime
#            return false;
#       return true;
# }

.data 
	space: .asciiz  " "
	prompt: .asciiz "Enter an integer N from 2 to 100: "
.text
main:	
	la $a0, prompt
	li $v0, 4
	syscall		#print prompt
	
	li $v0,	5
	syscall		#read integer
	
	add $t0, $v0, $zero	#save integer in t0
	
	li $t1, 2	#counter = 2 = t2
	
loop:	beq $t1, $t0, end	#if counter = integer, exit program
	addi $a0, $t1, 0
	jal isPrime
	addi $t7, $v0, 0	
	beqz $t7, end1		#if isPrime returns 0, branch to end1 (false)
	bnez $t7, end4		#if isPrime returns 1, branch to end4 (true)
	
end1:	addi $t1, $t1, 1 	#increase counter
	j loop
end4:		
	la $a0, space
	li $v0, 4
	syscall			#print space
	addi $a0, $t1, 0
	li $v0, 1
	syscall			#print counter
	addi $t1, $t1, 1	#increase counter
	j loop
end:	li $v0, 10
	syscall			#exit	
	
isPrime:li $t3, 2 	# i = t3 = 2
loop2:	beq $t3, $a0, end3	#if i > integer end loop
	div $a0, $t3
	mfhi $t4
	beqz $t4, end2		#if integer % i == 0 , end loop cuz number isnt prime
	addi $t3, $t3, 1	# i + 1
	j loop2
end2: 	li $v0, 0	#return 0 if false ie if  not prime number	
	jr $ra
end3:	li $v0, 1	#return 1 if true ie if  prime number
	jr $ra	
	


